" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override
" any settings in these files.
" If you don't want that to happen, uncomment the below line to prevent
" defaults.vim from being loaded.
" let g:skip_defaults_vim = 1

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
filetype plugin indent on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif



" my edits

" set line numbers
set number

" setting colorscheme
colorscheme gruvbox
hi Normal ctermbg=236 
"colorscheme hybrid

" setting up shell explicitly
set shell=/usr/bin/bash

" changing split default
set splitright                " The new buffer will be right of the
                              " current buffer
set splitbelow                " The new buffer will be below of the
                              " current buffer

" spacing related settings
set tabstop=4                 " The width of a tab is set to 4
                              " Still it is a `\t`. It is just that
	                          " Vim will interpret it to be having
	                          " a width of 4.
set shiftwidth=4              " Indents will have a width of 4
set expandtab                 " Expand TABs to SPACEs
set softtabstop=4             " Sets the number of columns for a TAB
set smarttab                  " Enabling this will make the tab key
                              " (in insert mode) insert spaces or
                              " tabs to go to the next indent of the
                              " next tabstop when the cursor is at
                              " the beginning of a line (i.e. the
                              " only preceding characters are
                              " whitespace).

" " setup a basic file manager
" " setup vim's default netrw file manager i.e. Explore
" let g:netrw_banner=0          " remove banner for minimalistic design
" let g:netrw_liststyle=3       " tree view for directory listing
"                               " there are four types
"                               " thin/long/wide/tree mapped to (0/1/2/3)
" let g:netrw_browse_split=4    " this determines how new files are open
"                               " 1 means open files in a new horizontal split
"                               " 2 means open files in a new vertical split
"                               " 3 means open files in a new tab
"                               " 4 means open in previous window
" let g:netrw_altv=1
" let g:netrw_winsize=16        " window size in percentage of monitor
" 
" augroup ProjectDrawer
"     autocmd!
"     autocmd VimEnter * :Lexplore
" augroup END


" some keybindings of my own

" mode related keybindings
" switch to normal mode
nnoremap ;; <Esc>
inoremap ;; <Esc>
vnoremap ;; <Esc>

" switch to insert mode

" switch to visual mode
nnoremap '; v
inoremap '; <Esc>v

" navigation related keybindings
" navigation between tabs(arrow key version)
nnoremap <C-Left> :tabprev<CR>
inoremap <C-Left> <Esc>:tabprev<CR>i
vnoremap <C-Left> <Esc>:tabprev<CR>v
nnoremap <C-Right> :tabnext<CR>
inoremap <C-Right> <Esc>:tabnext<CR>i
vnoremap <C-Right> <Esc>:tabnext<CR>v
" navigation between tabs(h/j/k/l version)
nnoremap <C-h> :tabprev<CR>
inoremap <C-h> <Esc>:tabprev<CR>i
vnoremap <C-h> <Esc>:tabprev<CR>v
nnoremap <C-l> :tabnext<CR>
inoremap <C-l> <Esc>:tabnext<CR>i
vnoremap <C-l> <Esc>:tabnext<CR>v


" navigation between splitted panes/windows
nnoremap <C-Up> <C-w><C-w>
inoremap <C-Up> <Esc><C-w><C-w>i
vnoremap <C-Up> <Esc><C-w><C-w>v

nnoremap <C-j> <C-w><C-w>
inoremap <C-j> <Esc><C-w><C-w>i
vnoremap <C-j> <Esc><C-w><C-w>v

" nore service related keybindings
" nore go to vim command executor
"nnoremap '' :
"inoremap '' <Esc>:
"vnoremap '' <Esc>:

""
" autocomletion of brackets, quotes etc.
"inoremap ( ()<Left>
"inoremap () ()
"inoremap (<CR> (<CR>)<Esc>ko
"inoremap { {}<Left>
"inoremap {} {}
"inoremap {<CR> {<CR>}<Esc>ko
"inoremap [ []<Left>
"inoremap [] []
"inoremap [<CR> [<CR>]<Esc>ko
"inoremap ' ''<Left>
"inoremap '' ''
"inoremap " ""<Left>
"inoremap "" ""

" edit related keybindings
" changing backspaces default behaviour like normal text editor(such as
" sublime, vscode, notepad++ etc). Now, we can delete the char in the
" first column and reach the previous rows last column, just like normal
" text editors
set backspace=indent,eol,start
" backspace equivalent from insert
" for both normal and insert mode

" highlighting line in insert mode
:autocmd InsertEnter * set cul
:autocmd InsertLeave * set nocul

